<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Admin Guide on Viron</title>
    <link>https://cam-inc.github.io/viron-doc/admin_guide/</link>
    <description>Recent content in Admin Guide on Viron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © CA MOBILE, Ltd. All rights reserved.</copyright>
    
	<atom:link href="https://cam-inc.github.io/viron-doc/admin_guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>エンドポイントを実装する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/swagger/</guid>
      <description>Vironサーバのエンドポイントは swagger.json を取得するURLで、GETでアクセスできる必要があります。
example-nodeでは /swagger.json をエンドポイントとしています。
swagger.yaml example-nodeではswaggerをyamlで記述しています。
yamlファイルの場所は api/swagger/swagger.yaml です。
swagger controller api/controller/swagger.js に swagger#show という名前でcontrollerを実装します。
example-nodeはnode-vironlibが提供するcontrollerを利用しています。
このcontrollerは api/swagger/swagger.yaml をパースしたjsonを返すだけでなく、ログインユーザーが権限を持たないパスは返さないなど動的な変換にも対応しています。</description>
    </item>
    
    <item>
      <title>認証方式を追加する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/authtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/authtype/</guid>
      <description> Vironサーバでは標準でメールアドレスおよびGoogleOAuthによる認証をサポートしています。
認証方式を追加する場合は、 /viron_authtype に定義を追加する必要があります。
authtype controller Vironサーバがサポートしている認証方式をクライアントに返すためのAPIです。
api/controller/viron_authtype.js に auth_type#list という名前でcontrollerを実装します。
下記インタフェースでAPIを実装してください。
[ // メールアドレスとパスワードによる認証。利用しない場合は削除しても良い { type: &#39;email&#39;, // メールアドレスとパスワードによる独自認証を利用する場合のtype provider: &#39;example-node&#39;, url: &#39;/signin&#39;, // サインインフォームでsubmitする際のリクエストURL method: &#39;POST&#39;, // submitする際のリクエストメソッド }, // GoogleOAuthによる認証。利用しない場合は削除しても良い { type: &#39;oauth&#39;, // OAuth認証を利用する場合のtype provider: &#39;google&#39;, // OAuthを提供するプロバイダ。 url: &#39;/googlesignin&#39;, method: &#39;POST&#39;, }, // 認証方式ではありませんが、サインアウト時にコールするAPIを定義するために必須です。 { type: &#39;signout&#39;, provider: &#39;&#39;, url: &#39;/signout&#39;, method: &#39;POST&#39;, }, ];  </description>
    </item>
    
    <item>
      <title>グローバルメニューを編集する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/menu/</guid>
      <description>Vironトップに表示されるエンドポイントの情報や、サインイン後のグローバルメニューの構成を取得できる必要があります。
/viron のレスポンスデータをカスタマイズして、簡単に画面構成を追加/変更することが可能です。
viron controller api/controller/viron.js に viron#show という名前でcontrollerを実装します。 下記インタフェースでAPIを実装してください。
{ // エンドポイントに関する情報 &amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;, // カラーテーマ &amp;quot;name&amp;quot;: &amp;quot;Viron example for Node.js - local&amp;quot;, // エンドポイントの名称。サービス名や環境など &amp;quot;tags&amp;quot;: [ // エンドポイントに付与するタグ &amp;quot;local&amp;quot;, &amp;quot;viron&amp;quot;, &amp;quot;example&amp;quot; ], &amp;quot;thumbnail&amp;quot;: &amp;quot;https://avatars3.githubusercontent.com/u/23251378?v=3&amp;amp;s=200&amp;quot; // サムネイル画像URL // グローバルメニュー &amp;quot;pages&amp;quot;: [ { &amp;quot;section&amp;quot;: &amp;quot;dashboard&amp;quot; // 大項目。&amp;quot;dashboard&amp;quot; or &amp;quot;manage&amp;quot; &amp;quot;group&amp;quot;: &amp;quot;&amp;quot;, // 中項目。空の場合はsection直下にcomponentsを配置 &amp;quot;id&amp;quot;: &amp;quot;quickview&amp;quot;, // ページのID。全ページでユニークになっている必要があります &amp;quot;name&amp;quot;: &amp;quot;クイックビュー&amp;quot;, // ページ名 &amp;quot;components&amp;quot;: [ // メニューからページを選択した際に表示されるコンポーネントの一覧 { &amp;quot;api&amp;quot;: { // コンポーネントに表示する値を取得するためのAPI &amp;quot;method&amp;quot;: &amp;quot;get&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/stats/dau&amp;quot; }, &amp;quot;name&amp;quot;: &amp;quot;DAU&amp;quot;, // コンポーネント名 &amp;quot;style&amp;quot;: &amp;quot;number&amp;quot; // コンポーネントスタイル。数字(number)、テーブル(table)の他に各種グラフ(graph-*)が利用できます }, { &amp;quot;api&amp;quot;: { &amp;quot;method&amp;quot;: &amp;quot;get&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/stats/mau&amp;quot; }, &amp;quot;name&amp;quot;: &amp;quot;MAU&amp;quot;, &amp;quot;style&amp;quot;: &amp;quot;number&amp;quot; }, ], }, { &amp;quot;section&amp;quot;: &amp;quot;manage&amp;quot; &amp;quot;group&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;ユーザー&amp;quot;, &amp;quot;components&amp;quot;: [ { &amp;quot;api&amp;quot;: { &amp;quot;method&amp;quot;: &amp;quot;get&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/user&amp;quot; }, &amp;quot;name&amp;quot;: &amp;quot;ユーザー&amp;quot;, &amp;quot;style&amp;quot;: &amp;quot;table&amp;quot;, &amp;quot;primary&amp;quot;: &amp;quot;id&amp;quot;, // テーブルデータの主キーにあたるフィールド &amp;quot;pagination&amp;quot;: true, // テーブルスタイルのページャーを有効にするフラグ &amp;quot;query&amp;quot;: [ // テーブルスタイルの検索フィールドを指定 { &amp;quot;key&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } ], &amp;quot;table_labels&amp;quot;: [ // テーブルスタイルの見出しにするフィールドを指定 &amp;quot;id&amp;quot;, &amp;quot;name&amp;quot; ], &amp;quot;actions&amp;quot;: [ // 他APIの関連付けが必要な場合は指定。詳細は下記[API間の関連付け]を参照 &amp;quot;/user/download/csv&amp;quot; ] } ], }, ], }  API間の関連付け Vironはcomponent取得APIのパスから関連するAPIを自動で抽出し、componentを操作するAPIとして表示します。</description>
    </item>
    
    <item>
      <title>CRUDを追加する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/crud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/crud/</guid>
      <description>ここでは開発のイメージを掴みやすくするために
架空のリソースに対するCRUDをVironに追加する手順を記載します。
実装には
 swaggerの編集 controllerの追加 /viron の編集  の3つの手順が必要です。
前提 追加するリソースは以下のようなスキーマを想定します。
mysql&amp;gt; desc books; +-------------+-------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------------+-------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | title | varchar(64) | YES | | NULL | | | author_name | varchar(32) | YES | | NULL | | | detail | text | YES | | NULL | | | created_at | datetime | NO | | NULL | | | updated_at | datetime | NO | | NULL | | | deleted_at | datetime | YES | | NULL | | +-------------+-------------+------+-----+---------+----------------+  Step1 - swaggerの編集 paths GET:/books, POST:/books, GET:/books/{id}, PUT:/books/{id}, DELETE:/books/{id} を追加します。</description>
    </item>
    
    <item>
      <title>オートコンプリートを実装する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/autocomplete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/autocomplete/</guid>
      <description> データ入力補助としてオートコンプリート機能を実装することができます。
Step1 - swaggerの定義 オートコンプリートを適用したいパラメータにx-autocompleteを定義することでオートコンプリートが有効になります。
user_id: description: ユーザーID example: 1 format: int64 type: integer x-autocomplete: field: name path: /viron_autocomplete query: model: users value: id  上記はexample-nodeのUserBlogPayloadを一部抜粋したものです。
nameを入力することでusersテーブルを検索し、idを補完することができます。
x-autocompleteの各フィールドについて  field  ユーザが入力する値がどのフィールドの値なのかを指定します。 ex) 上記例でユーザーがhogeと入力しているとき、サーバへのリクエストは GET: /viron_autocomplete?name=hoge となります。  path  検索を行い、一致するリストを返却するコントローラのパスです。 example-nodeで使用している/viron_autocompleteはmodelで指定したテーブルに部分一致検索を行うシンプルな汎用コントローラです。  query  field以外にサーバに送信したいクエリがあるときに指定します。 上記例では GET: /viron_autocomplete?name=hoge&amp;amp;model=users&amp;amp;value=id が実際に送信されるリクエストになります。   Step2 - controllerの実装 x-autocomplete.pathに指定したコントローラの実装を行います。
他のコントローラ同様、swaggerの定義も必要です。
下記インタフェースでAPIを実装してください。
[ { name: &#39;test-user01&#39;, // オートコンプリート結果をリスト表示する際の表示項目です value: 1, // 選択時に実際に入力される値です }, { name: &#39;test-user02&#39;, value: 2, }, ]  </description>
    </item>
    
    <item>
      <title>バリデータを定義する</title>
      <link>https://cam-inc.github.io/viron-doc/admin_guide/validator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cam-inc.github.io/viron-doc/admin_guide/validator/</guid>
      <description>swaggerにバリデータの定義を行うことで、Vironにバリデーションの機能を持たせることができます。
利用可能なバリデータについてはexample-nodeのswagger.yamlのValidatorを参考にしてください。
また、バリデータの記述方法についてはJSON-schema-validationのドキュメントを参照してください。</description>
    </item>
    
  </channel>
</rss>